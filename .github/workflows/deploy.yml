name: Auto Deploy to Vercel & Render

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  # Frontend deployment to Vercel
  deploy-frontend:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Install Vercel CLI
      run: npm install -g vercel@latest
      
    - name: Deploy to Vercel
      run: |
        cd frontend
        vercel --prod --token ${{ secrets.VERCEL_TOKEN }} --yes
      env:
        VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
        VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
        VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

  # Backend deployment to Render
  deploy-backend:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        cd backend
        pip install -r requirements.txt
        
    - name: Run tests
      run: |
        cd backend
        python -m pytest tests/ -v
        
    - name: Deploy to Render
      run: |
        # Trigger Render deployment via webhook
        curl -X POST ${{ secrets.RENDER_WEBHOOK_URL }} \
          -H "Content-Type: application/json" \
          -d '{"ref": "${{ github.ref }}", "sha": "${{ github.sha }}"}'
      env:
        RENDER_WEBHOOK_URL: ${{ secrets.RENDER_WEBHOOK_URL }}

  # Health check after deployment
  health-check:
    runs-on: ubuntu-latest
    needs: [deploy-frontend, deploy-backend]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Wait for deployments
      run: sleep 60
      
    - name: Check frontend health
      run: |
        curl -f ${{ secrets.FRONTEND_URL }}/health || exit 1
      env:
        FRONTEND_URL: ${{ secrets.FRONTEND_URL }}
        
    - name: Check backend health
      run: |
        curl -f ${{ secrets.BACKEND_URL }}/health || exit 1
      env:
        BACKEND_URL: ${{ secrets.BACKEND_URL }}
        
    - name: Notify deployment success
      run: |
        echo "ðŸŽ‰ Deployment completed successfully!"
        echo "Frontend: ${{ secrets.FRONTEND_URL }}"
        echo "Backend: ${{ secrets.BACKEND_URL }}" 